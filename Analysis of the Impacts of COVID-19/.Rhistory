# Filter the combined data to only include countries with a population greater than Brazil's
final_data <- combined_data %>%
filter(Countries %in% countries_larger_than_brazil$Countries)
final_data <- final_data %>%
filter(complete.cases(final_data)) %>%
filter(cases > 0 & deaths > 0) %>%
rename(date = "data")
# Display the first few lines of the final data set
head(final_data)
summary(final_data)
# Check duplicates by country and date
duplicates_by_country <- final_data %>%
group_by(Countries, date) %>%
summarise(Count = n(), .groups = 'drop') %>%
filter(Count > 1)
print(unique(duplicates_by_country$Countries))
# Filter data for China and check for duplicates by date
duplicates_china <- final_data %>%
filter(Countries == "China") %>%
group_by(date, cases) %>%
summarise(Count = n(), .groups = 'drop') %>%
filter(Count > 1)
head(duplicates_china)
final_data = final_data %>%
filter(Countries != "China")
print(unique(final_data$Countries))
# Create a plot for each country
country_list <- unique(final_data$Countries)
# Loop to create a subplot for each country
for (country in country_list) {
country_data <- filter(final_data, Countries == country)
# Create a plot for cases
cases_plot <- ggplot(country_data, aes(x = date, y = cases)) +
geom_line(color = "blue") +
labs(title = paste("COVID-19 Cases in", country),
x = "Date",
y = "Number of Cases") +
theme_minimal() +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = " million"))  # Format numbers in millions
# Create a plot for deaths
deaths_plot <- ggplot(country_data, aes(x = date, y = deaths)) +
geom_line(color = "red") +
labs(title = paste("COVID-19 Deaths in", country),
x = "Date",
y = "Number of Deaths") +
theme_minimal() +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = " million"))  # Format numbers in millions
# Combine the plots side by side
combined_plot <- grid.arrange(cases_plot, deaths_plot, ncol = 2)
# Display the combined plot
invisible(combined_plot)
}
# Group the data by country and calculate the required statistics
summary_by_country <- final_data %>%
group_by(Countries) %>%
summarise(
Average_Cases = mean(cases),                     # Average number of cases
Average_Deaths = mean(deaths),                   # Average number of deaths
Std_Dev_Cases = sd(cases),                       # Standard deviation of cases
Std_Dev_Deaths = sd(deaths),                     # Standard deviation of deaths
Total_Cases = sum(cases),                        # Total number of cases
Total_Deaths = sum(deaths),                      # Total number of deaths
First_Death_Date = min(date[deaths > 0]),        # Date of the first death
First_Case_Date = min(date[cases > 0]),          # Date of the first case
Last_Death_Date = max(date[deaths > 0]),         # Date of the last death
Last_Case_Date = max(date[cases > 0])            # Date of the last case
)
# Display the summary
print(summary_by_country)
# Função para criar o modelo preditivo para cada país
create_trained_models <- function(data) {
# Criar séries temporais
ts_cases <- ts(data$cases, frequency = 180)
ts_deaths <- ts(data$deaths, frequency = 180)
# Criar o modelo ARIMA para casos
# Aumentar max.p e max.q para considerar mais lags
model_cases <- auto.arima(ts_cases, start.p = 1, start.q = 1, max.p = 5, max.q = 5)
# Criar o modelo ARIMA para mortes
# Aumentar max.p e max.q para considerar mais lags
model_deaths <- auto.arima(ts_deaths, start.p = 1, start.q = 1, max.p = 5, max.q = 5)
# Retornar os modelos treinados
list(
model_cases = model_cases,
model_deaths = model_deaths
)
}
# Lista para armazenar os modelos de cada país
models_by_country <- list()
# Obter a lista de países
countries <- unique(final_data$Countries)
# Loop para aplicar a função em cada país
for (country in countries) {
country_data <- final_data[final_data$Countries == country, ]
models_by_country[[country]] <- create_trained_models(country_data)
}
# Função para criar o modelo preditivo para cada país
create_trained_models <- function(data) {
# Criar séries temporais
ts_cases <- ts(data$cases, frequency = 180)
ts_deaths <- ts(data$deaths, frequency = 180)
# Criar o modelo ARIMA para casos
# Aumentar max.p e max.q para considerar mais lags
model_cases <- auto.arima(ts_cases, start.p = 1, start.q = 1, max.p = 5, max.q = 5)
# Criar o modelo ARIMA para mortes
# Aumentar max.p e max.q para considerar mais lags
model_deaths <- auto.arima(ts_deaths, start.p = 1, start.q = 1, max.p = 5, max.q = 5)
# Retornar os modelos treinados
list(
model_cases = model_cases,
model_deaths = model_deaths
)
}
# Lista para armazenar os modelos de cada país
models_by_country <- list()
# Obter a lista de países
countries <- unique(final_data$Countries)
# Loop para aplicar a função em cada país
for (country in countries) {
country_data <- final_data[final_data$Countries == country, ]
models_by_country[[country]] <- create_trained_models(country_data)
}
knitr::opts_chunk$set(echo = TRUE)
# Import libraries
library(tidyverse)
library(gridExtra)
library(scales)
library(forecast)
# Define URLs for confirmed cases, deaths, and demographic information of countries
confirmed_global <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
deaths_global   <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
UID_FIPS_table_url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv"
# Load data from the defined URLs
confirmed <- read_csv(confirmed_global)
deaths <- read_csv(deaths_global)
UID_FIPS_table <- read_csv(UID_FIPS_table_url)
# Transform the confirmed data from wide to long format,
# extracting dates and confirmed cases for each location
confirmed <- confirmed %>%
pivot_longer(
cols = -c(`Province/State`, `Country/Region`, Lat, Long),  # Keep these columns fixed
names_to = "data",  # Name of the new column for dates
values_to = "cases"  # Name of the new column for cases
) %>% mutate(data = mdy(data))  # Convert dates from month/day/year format to Date
# Transform the death data from wide to long format,
# similar to the confirmed data
deaths <- deaths %>%
pivot_longer(
cols = -c(`Province/State`, `Country/Region`, Lat, Long),
names_to = "data",
values_to = "deaths"
) %>% mutate(data = mdy(data))
# Load the demographic information table
UID_FIPS_table <- read.csv(UID_FIPS_table_url)
# Extract Brazil's population using the combined key "Brazil"
pop_brasil <- UID_FIPS_table %>%
filter(Combined_Key == "Brazil") %>%
pull(Population)  # Only extract the population value
# Filter countries with a population greater than or equal to Brazil's,
# excluding province or state records (country-level data)
countries_larger_than_brazil <- UID_FIPS_table %>%
filter(Population >= pop_brasil) %>%
filter(is.na(Province_State) | Province_State == "") %>%
select(Country_Region, Population) %>%
rename(Countries = "Country_Region")
# Perform a join of the confirmed and death data based on multiple keys
combined_data <- confirmed %>%
left_join(deaths, by = c("Country/Region", "Province/State", "Lat", "Long", "data")) %>%
select(-`Province/State`) %>%
rename(Countries = "Country/Region")
# Filter the combined data to only include countries with a population greater than Brazil's
final_data <- combined_data %>%
filter(Countries %in% countries_larger_than_brazil$Countries)
final_data <- final_data %>%
filter(complete.cases(final_data)) %>%
filter(cases > 0 & deaths > 0) %>%
rename(date = "data")
# Display the first few lines of the final data set
head(final_data)
summary(final_data)
# Check duplicates by country and date
duplicates_by_country <- final_data %>%
group_by(Countries, date) %>%
summarise(Count = n(), .groups = 'drop') %>%
filter(Count > 1)
print(unique(duplicates_by_country$Countries))
# Filter data for China and check for duplicates by date
duplicates_china <- final_data %>%
filter(Countries == "China") %>%
group_by(date, cases) %>%
summarise(Count = n(), .groups = 'drop') %>%
filter(Count > 1)
head(duplicates_china)
final_data = final_data %>%
filter(Countries != "China")
print(unique(final_data$Countries))
# Create a plot for each country
country_list <- unique(final_data$Countries)
# Loop to create a subplot for each country
for (country in country_list) {
country_data <- filter(final_data, Countries == country)
# Create a plot for cases
cases_plot <- ggplot(country_data, aes(x = date, y = cases)) +
geom_line(color = "blue") +
labs(title = paste("COVID-19 Cases in", country),
x = "Date",
y = "Number of Cases") +
theme_minimal() +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = " million"))  # Format numbers in millions
# Create a plot for deaths
deaths_plot <- ggplot(country_data, aes(x = date, y = deaths)) +
geom_line(color = "red") +
labs(title = paste("COVID-19 Deaths in", country),
x = "Date",
y = "Number of Deaths") +
theme_minimal() +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = " million"))  # Format numbers in millions
# Combine the plots side by side
combined_plot <- grid.arrange(cases_plot, deaths_plot, ncol = 2)
# Display the combined plot
invisible(combined_plot)
}
# Group the data by country and calculate the required statistics
summary_by_country <- final_data %>%
group_by(Countries) %>%
summarise(
Average_Cases = mean(cases),                     # Average number of cases
Average_Deaths = mean(deaths),                   # Average number of deaths
Std_Dev_Cases = sd(cases),                       # Standard deviation of cases
Std_Dev_Deaths = sd(deaths),                     # Standard deviation of deaths
Total_Cases = sum(cases),                        # Total number of cases
Total_Deaths = sum(deaths),                      # Total number of deaths
First_Death_Date = min(date[deaths > 0]),        # Date of the first death
First_Case_Date = min(date[cases > 0]),          # Date of the first case
Last_Death_Date = max(date[deaths > 0]),         # Date of the last death
Last_Case_Date = max(date[cases > 0])            # Date of the last case
)
# Display the summary
print(summary_by_country)
# Função para criar o modelo preditivo para cada país
create_trained_models <- function(data) {
# Criar séries temporais
ts_cases <- ts(data$cases, frequency = 180)
ts_deaths <- ts(data$deaths, frequency = 180)
# Criar o modelo ARIMA para casos
# Aumentar max.p e max.q para considerar mais lags
model_cases <- auto.arima(ts_cases, start.p = 1, start.q = 1, max.p = 5, max.q = 5)
# Criar o modelo ARIMA para mortes
# Aumentar max.p e max.q para considerar mais lags
model_deaths <- auto.arima(ts_deaths, start.p = 1, start.q = 1, max.p = 5, max.q = 5)
# Retornar os modelos treinados
list(
model_cases = model_cases,
model_deaths = model_deaths
)
}
# Lista para armazenar os modelos de cada país
models_by_country <- list()
# Obter a lista de países
countries <- unique(final_data$Countries)
# Loop para aplicar a função em cada país
for (country in countries) {
country_data <- final_data[final_data$Countries == country, ]
models_by_country[[country]] <- create_trained_models(country_data)
}
# Função para criar o modelo preditivo para cada país
create_trained_models <- function(data) {
# Criar séries temporais
ts_cases <- ts(data$cases, frequency = 7)
ts_deaths <- ts(data$deaths, frequency = 7)
# Criar o modelo ARIMA para casos
# Aumentar max.p e max.q para considerar mais lags
model_cases <- auto.arima(ts_cases, start.p = 1, start.q = 1, max.p = 5, max.q = 5)
# Criar o modelo ARIMA para mortes
# Aumentar max.p e max.q para considerar mais lags
model_deaths <- auto.arima(ts_deaths, start.p = 1, start.q = 1, max.p = 5, max.q = 5)
# Retornar os modelos treinados
list(
model_cases = model_cases,
model_deaths = model_deaths
)
}
# Lista para armazenar os modelos de cada país
models_by_country <- list()
# Obter a lista de países
countries <- unique(final_data$Countries)
# Loop para aplicar a função em cada país
for (country in countries) {
country_data <- final_data[final_data$Countries == country, ]
models_by_country[[country]] <- create_trained_models(country_data)
}
# Função para criar o modelo preditivo para cada país
create_trained_models <- function(data) {
# Criar séries temporais
ts_cases <- ts(data$cases, frequency = 7)
ts_deaths <- ts(data$deaths, frequency = 7)
# Criar o modelo ARIMA para casos
# Aumentar max.p e max.q para considerar mais lags
model_cases <- auto.arima(ts_cases, start.p = 1, start.q = 1, max.p = 5, max.q = 5)
# Criar o modelo ARIMA para mortes
# Aumentar max.p e max.q para considerar mais lags
model_deaths <- auto.arima(ts_deaths, start.p = 1, start.q = 1, max.p = 5, max.q = 5)
# Retornar os modelos treinados
list(
model_cases = model_cases,
model_deaths = model_deaths
)
}
# Lista para armazenar os modelos de cada país
models_by_country <- list()
# Obter a lista de países
countries <- unique(final_data$Countries)
# Loop para aplicar a função em cada país
for (country in countries) {
country_data <- final_data[final_data$Countries == country, ]
models_by_country[[country]] <- create_trained_models(country_data)
}
models_by_country
# Função para criar o modelo preditivo para cada país
create_trained_models <- function(data) {
# Criar séries temporais
ts_cases <- ts(data$cases, frequency = 180)
ts_deaths <- ts(data$deaths, frequency = 180)
# Criar o modelo ARIMA para casos
# Aumentar max.p e max.q para considerar mais lags
model_cases <- auto.arima(ts_cases, start.p = 1, start.q = 1, max.p = 5, max.q = 5)
# Criar o modelo ARIMA para mortes
# Aumentar max.p e max.q para considerar mais lags
model_deaths <- auto.arima(ts_deaths, start.p = 1, start.q = 1, max.p = 5, max.q = 5)
# Retornar os modelos treinados
list(
model_cases = model_cases,
model_deaths = model_deaths
)
}
# Lista para armazenar os modelos de cada país
models_by_country <- list()
# Obter a lista de países
countries <- unique(final_data$Countries)
# Loop para aplicar a função em cada país
for (country in countries) {
country_data <- final_data[final_data$Countries == country, ]
models_by_country[[country]] <- create_trained_models(country_data)
}
# Função para criar o modelo preditivo para cada país
create_trained_models <- function(data) {
# Criar séries temporais
ts_cases <- ts(data$cases, frequency = 90)
ts_deaths <- ts(data$deaths, frequency = 90)
# Criar o modelo ARIMA para casos
# Aumentar max.p e max.q para considerar mais lags
model_cases <- auto.arima(ts_cases, start.p = 1, start.q = 1, max.p = 5, max.q = 5)
# Criar o modelo ARIMA para mortes
# Aumentar max.p e max.q para considerar mais lags
model_deaths <- auto.arima(ts_deaths, start.p = 1, start.q = 1, max.p = 5, max.q = 5)
# Retornar os modelos treinados
list(
model_cases = model_cases,
model_deaths = model_deaths
)
}
# Lista para armazenar os modelos de cada país
models_by_country <- list()
# Obter a lista de países
countries <- unique(final_data$Countries)
# Loop para aplicar a função em cada país
for (country in countries) {
country_data <- final_data[final_data$Countries == country, ]
models_by_country[[country]] <- create_trained_models(country_data)
}
knitr::opts_chunk$set(echo = TRUE)
# Import libraries
library(tidyverse)
library(gridExtra)
library(scales)
library(forecast)
# Define URLs for confirmed cases, deaths, and demographic information of countries
confirmed_global <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
deaths_global   <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
UID_FIPS_table_url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv"
# Load data from the defined URLs
confirmed <- read_csv(confirmed_global)
deaths <- read_csv(deaths_global)
UID_FIPS_table <- read_csv(UID_FIPS_table_url)
# Transform the confirmed data from wide to long format,
# extracting dates and confirmed cases for each location
confirmed <- confirmed %>%
pivot_longer(
cols = -c(`Province/State`, `Country/Region`, Lat, Long),  # Keep these columns fixed
names_to = "data",  # Name of the new column for dates
values_to = "cases"  # Name of the new column for cases
) %>% mutate(data = mdy(data))  # Convert dates from month/day/year format to Date
# Transform the death data from wide to long format,
# similar to the confirmed data
deaths <- deaths %>%
pivot_longer(
cols = -c(`Province/State`, `Country/Region`, Lat, Long),
names_to = "data",
values_to = "deaths"
) %>% mutate(data = mdy(data))
# Load the demographic information table
UID_FIPS_table <- read.csv(UID_FIPS_table_url)
# Extract Brazil's population using the combined key "Brazil"
pop_brasil <- UID_FIPS_table %>%
filter(Combined_Key == "Brazil") %>%
pull(Population)  # Only extract the population value
# Filter countries with a population greater than or equal to Brazil's,
# excluding province or state records (country-level data)
countries_larger_than_brazil <- UID_FIPS_table %>%
filter(Population >= pop_brasil) %>%
filter(is.na(Province_State) | Province_State == "") %>%
select(Country_Region, Population) %>%
rename(Countries = "Country_Region")
# Perform a join of the confirmed and death data based on multiple keys
combined_data <- confirmed %>%
left_join(deaths, by = c("Country/Region", "Province/State", "Lat", "Long", "data")) %>%
select(-`Province/State`) %>%
rename(Countries = "Country/Region")
# Filter the combined data to only include countries with a population greater than Brazil's
final_data <- combined_data %>%
filter(Countries %in% countries_larger_than_brazil$Countries)
final_data <- final_data %>%
filter(complete.cases(final_data)) %>%
filter(cases > 0 & deaths > 0) %>%
rename(date = "data")
# Display the first few lines of the final data set
head(final_data)
summary(final_data)
# Check duplicates by country and date
duplicates_by_country <- final_data %>%
group_by(Countries, date) %>%
summarise(Count = n(), .groups = 'drop') %>%
filter(Count > 1)
print(unique(duplicates_by_country$Countries))
# Filter data for China and check for duplicates by date
duplicates_china <- final_data %>%
filter(Countries == "China") %>%
group_by(date, cases) %>%
summarise(Count = n(), .groups = 'drop') %>%
filter(Count > 1)
head(duplicates_china)
final_data = final_data %>%
filter(Countries != "China")
print(unique(final_data$Countries))
# Create a plot for each country
country_list <- unique(final_data$Countries)
# Loop to create a subplot for each country
for (country in country_list) {
country_data <- filter(final_data, Countries == country)
# Create a plot for cases
cases_plot <- ggplot(country_data, aes(x = date, y = cases)) +
geom_line(color = "blue") +
labs(title = paste("COVID-19 Cases in", country),
x = "Date",
y = "Number of Cases") +
theme_minimal() +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = " million"))  # Format numbers in millions
# Create a plot for deaths
deaths_plot <- ggplot(country_data, aes(x = date, y = deaths)) +
geom_line(color = "red") +
labs(title = paste("COVID-19 Deaths in", country),
x = "Date",
y = "Number of Deaths") +
theme_minimal() +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = " million"))  # Format numbers in millions
# Combine the plots side by side
combined_plot <- grid.arrange(cases_plot, deaths_plot, ncol = 2)
# Display the combined plot
invisible(combined_plot)
}
# Group the data by country and calculate the required statistics
summary_by_country <- final_data %>%
group_by(Countries) %>%
summarise(
Average_Cases = mean(cases),                     # Average number of cases
Average_Deaths = mean(deaths),                   # Average number of deaths
Std_Dev_Cases = sd(cases),                       # Standard deviation of cases
Std_Dev_Deaths = sd(deaths),                     # Standard deviation of deaths
Total_Cases = sum(cases),                        # Total number of cases
Total_Deaths = sum(deaths),                      # Total number of deaths
First_Death_Date = min(date[deaths > 0]),        # Date of the first death
First_Case_Date = min(date[cases > 0]),          # Date of the first case
Last_Death_Date = max(date[deaths > 0]),         # Date of the last death
Last_Case_Date = max(date[cases > 0])            # Date of the last case
)
# Display the summary
print(summary_by_country)
# Função para criar o modelo preditivo para cada país
create_trained_models <- function(data) {
# Criar séries temporais
ts_cases <- ts(data$cases, frequency = 90)
ts_deaths <- ts(data$deaths, frequency = 90)
# Criar o modelo ARIMA para casos
# Aumentar max.p e max.q para considerar mais lags
model_cases <- auto.arima(ts_cases, start.p = 1, start.q = 1, max.p = 5, max.q = 5)
# Criar o modelo ARIMA para mortes
# Aumentar max.p e max.q para considerar mais lags
model_deaths <- auto.arima(ts_deaths, start.p = 1, start.q = 1, max.p = 5, max.q = 5)
# Retornar os modelos treinados
list(
model_cases = model_cases,
model_deaths = model_deaths
)
}
# Lista para armazenar os modelos de cada país
models_by_country <- list()
# Obter a lista de países
countries <- unique(final_data$Countries)
# Loop para aplicar a função em cada país
for (country in countries) {
country_data <- final_data[final_data$Countries == country, ]
models_by_country[[country]] <- create_trained_models(country_data)
}
